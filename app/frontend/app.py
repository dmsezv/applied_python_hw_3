import streamlit as st
import requests
from dotenv import load_dotenv
import os
import extra_streamlit_components as stx
from datetime import datetime, timedelta
import re


st.set_page_config(
    page_title="URL Shortener",
    layout="centered"
)

load_dotenv()


API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8000")

@st.cache_resource(experimental_allow_widgets=True)
def get_cookie_manager():
    return stx.CookieManager(key="unique_cookie_manager")


cookie_manager = get_cookie_manager()


if 'is_authenticated' not in st.session_state:
    st.session_state.is_authenticated = False
if 'username' not in st.session_state:
    st.session_state.username = None
if 'access_token' not in st.session_state:
    st.session_state.access_token = None


token_from_cookie = cookie_manager.get("access_token")
username_from_cookie = cookie_manager.get("username")


if not st.session_state.is_authenticated and token_from_cookie and username_from_cookie:
    st.session_state.is_authenticated = True
    st.session_state.access_token = token_from_cookie
    st.session_state.username = username_from_cookie


def login(username: str, password: str) -> bool:
    try:
        response = requests.post(
            f"{API_BASE_URL}/auth/token",
            data={
                "username": username,
                "password": password,
                "grant_type": "password"
            }
        )
        if response.status_code == 200:
            data = response.json()
            st.session_state.access_token = data["access_token"]
            st.session_state.is_authenticated = True
            st.session_state.username = username

            # 7 days cookie
            expiry = datetime.now() + timedelta(days=7)
            cookie_manager.set("access_token", data["access_token"], expires_at=expiry, key="set_token")
            cookie_manager.set("username", username, expires_at=expiry, key="set_username")

            st.success("–£—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω")
            st.rerun()
            return True
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏")
        return False
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {str(e)}")
        return False


def register(username: str, password: str) -> bool:
    try:
        response = requests.post(
            f"{API_BASE_URL}/auth/register",
            json={"username": username, "password": password, "email": f"{username}@example.com"}
        )
        if response.status_code == 200:
            st.success("–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
            return login(username, password)
        else:
            error_msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
            try:
                error_data = response.json()
                if "detail" in error_data:
                    error_msg = f"–û—à–∏–±–∫–∞: {error_data['detail']}"
            except Exception:
                pass
            st.error(error_msg)
        return False
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        return False


def logout():
    st.session_state.is_authenticated = False
    st.session_state.username = None
    st.session_state.access_token = None

    cookie_manager.delete("access_token", key="delete_token")
    cookie_manager.delete("username", key="delete_username")

    st.rerun()


def ensure_url_protocol(url: str) -> str:
    if url and not re.match(r'^https?://', url):
        return f"https://{url}"
    return url


def create_short_link(original_url: str, custom_alias: str = None, expires_at=None) -> dict:
    try:
        original_url = ensure_url_protocol(original_url)
        headers = {}

        if st.session_state.is_authenticated:
            headers["Authorization"] = f"Bearer {st.session_state.access_token}"

        data = {"original_url": original_url}
        if custom_alias:
            data["custom_alias"] = custom_alias
        if expires_at:
            data["expires_at"] = expires_at.isoformat()

        response = requests.post(
            f"{API_BASE_URL}/links/shorten",
            json=data,
            headers=headers
        )

        if response.status_code == 200:
            return response.json()
        else:
            error_msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏"
            try:
                error_data = response.json()
                if "detail" in error_data:
                    error_msg = f"–û—à–∏–±–∫–∞: {error_data['detail']}"
            except Exception:
                pass
            raise Exception(error_msg)
    except Exception as e:
        raise e


def search_links(original_url: str) -> list:
    try:
        headers = {}
        if st.session_state.is_authenticated:
            headers["Authorization"] = f"Bearer {st.session_state.access_token}"

        response = requests.get(
            f"{API_BASE_URL}/search",
            params={"original_url": original_url},
            headers=headers
        )

        if response.status_code == 200:
            return response.json()
        else:
            error_msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Å—ã–ª–æ–∫"
            try:
                error_data = response.json()
                if "detail" in error_data:
                    error_msg = f"–û—à–∏–±–∫–∞: {error_data['detail']}"
            except Exception:
                pass
            raise Exception(error_msg)
    except Exception as e:
        raise e


def display_link_details(link_data: dict, use_expander=True):
    short_url = f"{API_BASE_URL}/{link_data['short_code']}"

    if use_expander:
        with st.expander("–î–µ—Ç–∞–ª–∏ —Å—Å—ã–ª–∫–∏"):
            _display_link_content(link_data, short_url)
    else:
        _display_link_content(link_data, short_url)


def _display_link_content(link_data: dict, short_url: str):
    st.write(f"**–ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞**: [{short_url}]({short_url})")
    st.write(f"**–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL**: {link_data['original_url']}")
    st.write(f"**–ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥**: {link_data['short_code']}")
    st.write(f"**–°–æ–∑–¥–∞–Ω–∞**: {link_data['created_at']}")
    if link_data.get('expires_at'):
        st.write(f"**–ò—Å—Ç–µ–∫–∞–µ—Ç**: {link_data['expires_at']}")
    st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤**: {link_data['clicks']}")

    # check is owner
    if st.session_state.is_authenticated and link_data.get('user_id') == st.session_state.get('user_id'):
        col1, col2 = st.columns(2)
        with col1:
            if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"delete_{link_data['short_code']}"):
                st.info("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É–¥–∞–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ")
        with col2:
            if st.button("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"edit_{link_data['short_code']}"):
                st.info("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ")


with st.sidebar:
    st.title("üë§ –ê–∫–∫–∞—É–Ω—Ç")

    if not st.session_state.is_authenticated:
        tab1, tab2 = st.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])

        with tab1:
            with st.form("login_form"):
                username = st.text_input("–ò–º—è —é–∑–µ—Ä–∞")
                password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
                submit_login = st.form_submit_button("–í–æ–π—Ç–∏")

                if submit_login:
                    if not username or not password:
                        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                    else:
                        login(username, password)

        with tab2:
            with st.form("register_form"):
                new_username = st.text_input("–ò–º—è —é–∑–µ—Ä–∞")
                new_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
                confirm_password = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password")
                submit_register = st.form_submit_button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")

                if submit_register:
                    if not new_username or not new_password or not confirm_password:
                        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                    elif new_password != confirm_password:
                        st.error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                    else:
                        register(new_username, new_password)
    else:
        st.write(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {st.session_state.username}!")
        if st.button("–í—ã–π—Ç–∏"):
            logout()


st.title("–°–µ—Ä–≤–∏—Å —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫")


if not st.session_state.is_authenticated:    
    link_result = None

    with st.form("shorten_form_guest"):
        original_url = st.text_input("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω–Ω—É—é —Å—Å—ã–ª–∫—É")
        submitted = st.form_submit_button("–°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É")

        if submitted:
            if not original_url:
                st.error("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è")
            else:
                try:
                    link_result = create_short_link(original_url)
                except Exception as e:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É: {str(e)}")

    if link_result:
        short_url = f"{API_BASE_URL}/{link_result['short_code']}"
        st.success("–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        col1, col2 = st.columns([3, 1])
        with col1:
            st.code(short_url)
        with col2:
            js_code = f"<script>navigator.clipboard.writeText('{short_url}');</script>"
            st.button("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", on_click=lambda: st.write(js_code, unsafe_allow_html=True))

        display_link_details(link_result)

    st.markdown("---")
    st.subheader("–ü–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏")
    search_url = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ")
    if st.button("–ù–∞–π—Ç–∏"):
        if not search_url:
            st.error("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –ø–æ–∏—Å–∫–∞")
        else:
            try:
                results = search_links(search_url)
                if not results:
                    st.warning("–°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                else:
                    st.success(f"–ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(results)}")
                    for idx, link in enumerate(results, 1):
                        with st.expander(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {idx}: {link['short_code']}"):
                            display_link_details(link, use_expander=False)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")

else:
    tabs = st.tabs(["–°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É", "–ú–æ–∏ —Å—Å—ã–ª–∫–∏", "–ü–æ–∏—Å–∫"])

    with tabs[0]:
        auth_link_result = None

        with st.form("shorten_form_auth"):
            original_url = st.text_input("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω–Ω—É—é —Å—Å—ã–ª–∫—É")
            custom_alias = st.text_input("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–ª–∏–∞—Å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
            expires_at = st.date_input("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")

            submitted = st.form_submit_button("–°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É")

            if submitted:
                if not original_url:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è")
                else:
                    try:
                        if expires_at:
                            expiry_datetime = datetime.combine(expires_at, datetime.max.time())
                        else:
                            expiry_datetime = None

                        auth_link_result = create_short_link(original_url, custom_alias, expiry_datetime)
                    except Exception as e:
                        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É: {str(e)}")

        if auth_link_result:
            short_url = f"{API_BASE_URL}/{auth_link_result['short_code']}"
            st.success("–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

            col1, col2 = st.columns([3, 1])
            with col1:
                st.code(short_url)
            with col2:
                js_code = f"<script>navigator.clipboard.writeText('{short_url}');</script>"
                st.button("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", on_click=lambda: st.write(js_code, unsafe_allow_html=True))

            display_link_details(auth_link_result)

    with tabs[1]:
        st.subheader("–ú–æ–∏ —Å—Å—ã–ª–∫–∏")
        st.info("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å—Å—ã–ª–æ–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Å–∫–æ—Ä–æ)")

    with tabs[2]:
        st.subheader("–ü–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏")
        search_url = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ")
        if st.button("–ù–∞–π—Ç–∏"):
            if not search_url:
                st.error("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –ø–æ–∏—Å–∫–∞")
            else:
                try:
                    results = search_links(search_url)
                    if not results:
                        st.warning("–°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    else:
                        st.success(f"–ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(results)}")
                        for idx, link in enumerate(results, 1):
                            with st.expander(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {idx}: {link['short_code']}"):
                                display_link_details(link, use_expander=False)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
