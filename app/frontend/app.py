import streamlit as st
import requests
from dotenv import load_dotenv
import os

load_dotenv()


API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8000")
API_PREFIX = os.getenv("API_PREFIX")


if 'is_authenticated' not in st.session_state:
    st.session_state.is_authenticated = False
if 'username' not in st.session_state:
    st.session_state.username = None
if 'access_token' not in st.session_state:
    st.session_state.access_token = None


st.set_page_config(
    page_title="URL Shortener",
    layout="centered"
)


def login(username: str, password: str) -> bool:
    try:
        response = requests.post(
            f"{API_BASE_URL}/auth/token",
            data={
                "username": username, 
                "password": password,
                "grant_type": "password"
            }
        )

        if response.status_code == 200:
            data = response.json()
            st.session_state.access_token = data["access_token"]
            st.session_state.is_authenticated = True
            st.session_state.username = username
            st.success("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
            st.rerun()
            return True
        else:
            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É")
        return False
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {str(e)}")
        return False


def register(username: str, password: str) -> bool:
    try:
        response = requests.post(
            f"{API_BASE_URL}/auth/register",
            json={"username": username, "password": password, "email": f"{username}@example.com"}
        )
        if response.status_code == 200:
            st.success("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            return login(username, password)
        else:
            error_msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
            try:
                error_data = response.json()
                if "detail" in error_data:
                    error_msg = f"–û—à–∏–±–∫–∞: {error_data['detail']}"
            except Exception:
                pass
            st.error(error_msg)
        return False
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        return False


with st.sidebar:
    st.title("üë§ –ü—Ä–æ—Ñ–∏–ª—å")

    if not st.session_state.is_authenticated:
        tab1, tab2 = st.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
        with tab1:
            with st.form("login_form"):
                username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
                submit_login = st.form_submit_button("–í–æ–π—Ç–∏")

                if submit_login:
                    if not username or not password:
                        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                    else:
                        login(username, password)
        with tab2:
            with st.form("register_form"):
                new_username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                new_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
                confirm_password = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password")
                submit_register = st.form_submit_button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")

                if submit_register:
                    if not new_username or not new_password or not confirm_password:
                        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                    elif new_password != confirm_password:
                        st.error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                    else:
                        register(new_username, new_password)
    else:
        st.write(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {st.session_state.username}!")
        if st.button("–í—ã–π—Ç–∏"):
            st.session_state.is_authenticated = False
            st.session_state.username = None
            st.session_state.access_token = None
            st.rerun()


st.title("–°–µ—Ä–≤–∏—Å —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫")
st.markdown("---")

with st.form("shorten_form"):
    original_url = st.text_input("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω–Ω—É—é —Å—Å—ã–ª–∫—É")
    custom_alias = st.text_input("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–ª–∏–∞—Å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
    expires_at = st.date_input("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
    
    submitted = st.form_submit_button("–°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É")
    
    if submitted:
        if not original_url:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è")
        else:
            st.info("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ")

st.markdown("---")
st.subheader("üìä –ü–æ–∏—Å–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
search_url = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ")
if st.button("–ù–∞–π—Ç–∏"):
    st.info("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ")